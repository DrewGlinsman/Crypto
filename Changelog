2/1/18 Andrew Katson
Created CryptoData.py to independently initialize all the necessary text files with data
Created Changelog to track changes made over time more succinctly
Created AutoTrader. Actual bot that will run when we trade

Updated CryptoEvaluator and AutoTrader to use the new Parameter Dictionary

2/4/18

Updated CryptoTrainer to now pass input to the iterations of the bot
Can now read and use input inside of the subprocesses
Added a randomizer to CryptoTrainer to randomize the parameters

2/5/18
Added a resetParameters method to reset the parameters for each randomization
Added functionality for setting the parameters as the best stored ones in AutoTrader.py
Added a testing variable to auto trader that makes it not read in the BEST_PARAMETERS text file each time so that if im testing i can use the same values

2//7/18
Added storage of all the values for the parameters so that they may be scaled
Added a method to get the max of each of the parameters
Added MODIFIED_VOLUME_MODIFIER into the parameter list (an old parameter I had forgotten when I ported things
Added checks in case no currency is selected to be bought. In that case we just sell the current crypto and do nothing until the next check
Fixed bug where modified volumes were cancelling themeselves out and always returning 0
Added function to reset list of the values to be used to scale
Changed modified_volume dictionary to contain values not lists of one value

2/8/18
Added fully randomized parameters for each bot run
Fixed parser to only read lines of output that contain a special character printed right before the parameter list
Added  method reWriteParameters to rewrite the paramters onto the original text file they were pulled from after all the tests
Updated CryptoEvalutator to have have the values and MaxValues lists as well as the capability (From AutoTrader)
Added method stringtoDict that takes the string passed (should be the string conversion of a dictionary) and parses it and returns a new dictionary object
Added method reformatLine to takes the special string grabbed from output that contains the returned parameters. And removes the edge definer strings

2/9/18
Fixed the auto trader modified volume function so that it appropriately splits the volume up into separate cases where if it is positive or negative the majority of the
volume associated with that interval is considered "positive"  or "negative" respectively and the minority is considered "negative" or "positive" respectively

2/10/18
Made it so that neither buybin nor sellbin can be called if either the current crypto or the past one are nothing

2/11/18
Changed getBinancePrice to use the price api call instead of all prices so it no longer needs to iterate until it finds the coin just gets the specific coins most recent price.
Made synctatic fixes to auto trader
Fixed bug where auto trader was not printing the endprice when checking intervals
Added volume scaling by price for the update crypto in auto trader
Made a CryptoStatAnalysis class that is an object that stores decisions made by the trading bots and evaluates them and prints the results
Removed the file writing from CryptoEvaluator
Added special import to AutoTrader and an instance of the CrptoStatAnalysis class
Added initialization variables for the CryptoStatAnalyis class that hold score, mean percent price change, and different choice data
Added another class in CryptoStatAnalysis that holds different stats for each crypto
Got CryptoEvaluator to be API independent

Crypto Trainer no longer randomizes all params.

2/12/18
AutoTradeer now has a CryptoStatsAnalysis object initialized when it begins

2/13/18
Added a check for max Value being 0 to crypto evaluator and auto trader to try to fix the division by 0 bug

2/14/18
Added additional checks in crypto evaluator for passing a blank string to getbinanceprice that should help with key error issues
Added new modified volume calculation that uses the size of the percent to parition the volume for summation
Added checks in modififed volume calculation that in receives volumes that would result in a zero sum, it will just halve the smaller amount

2/16/18
Added some small fixes to make cryptoTrainer run multiple "classes" of evolution not just multiple variations of the bot

2/21/18
Added a oldcode text file to temporarily hold old code I haven't decided if I like yet
Added a function to crypto trainer to check if there are command line arguments and if there are it pulls out the number of desired classes and iterations

2/23/18
added more clarity to the functions in crypto stats
began implementation of the crypto stats analysis class into crypto evaluator
added a variation num parameter and a class num parameter
added a function to set up a stat Dictionary to be sent to crypto run to crypto evaluator
the crypto stats object for each crypto evaluator now creates a new dictionary with statistics from the run

2/24/18
added a set of new parameters that will give both a starting point for a test in the past as well as the interval length to train over

2/25/18
fixed the rewriting params method in crypto trainer to recognize a last value in the parameter list
fixed minor bugs that affected the resetting and proper randomization of parameters in crypto trainer

2/26/18
added a log file for the trainer

2/27/18
Added a check to the file rewriter where it will not keep printing if it finds that you are on the last string
Added some extra code to reverse all the crypto lists that are pulled from the crypto stats stored data

3/4/18
Added logs with their own files by day for trainer and evaluator
Added stream url generation to tester.py ans made the parts to test modular

3/10/18
Added new condition to evakuator for the exit condition
Converted all print statements to file writes in cryoto evaluator
Added tracker for the number of sells
Added tracker for all the decisions in terms of what is bought and sold
Added storage for the percent changes over the lifetime of owning all cryptos in increments and for whole consecutvie segments of time

3/11/18
added comments to the main method of cryptoevaluator
added the timestamp for the build logs method so it matches the cryptostatanalysis timestamp
added a special true price bought to make the outputed cumulative percent change equal to the correct change

3/12/18
added a special stats dictionary that will hold the total volume, score, and mean of each crypto for every cycle

3/23/18
fixed key error occuring when calculating % changes in crypto stat analyis
updated log system so the files are sepearted by the run of crypto trainer then class

3/25/18
overhauled automated log system so they are all under a common set of headings
fixed the error with indexes causing zero calculations
potentially fixed no cryptos picked crash error (not sure because it can still pick no crypto and not have crashed)

3/26/18
added a system to randomly choose which parameters to change

4/9/18
fixed timeHeld bug where it actually held the total amount of time that had gone by
implemented a dictionary to store input passed to crypto evaluator
crypto evaluator now reads and returns the parameters through pickle files
crypto trainer now reads and writes to pickles files
all legacy reading and writing to the parameter files and passed parameters in input stream removed from crypto trainer and evaluator
runtime, mode, pickle param path, classnum, and variation num are passed through an input stream to evaluator

4/14/18
fixed log path errors for classnum, variationnum, and runtime for solo evaluator
added percent changes and average percent change by group to the crypto stat analysis decisions list
fixed exit condition to treat the max percent increase parameter differently if it is negative or positive
fixed crypto stats. now the dictionaries face the right way (0 is the oldest data)
added a new parameter that measures how much data before the interval you want
fixed modified volume's index issue where the percent changes and volume changes were not lined up

4/15/18
added a new file CryptoGraphs that will make graphs of the basic data collected over the interval being used
added Start money and End money parameters to track the balance as it would change in reality

4/22/18
made a new script that holds all the different kinds of plots that can be made using the data
added functions to create a dataframe of all the data passed to cryptographs for analysis
added function to crypto graph that initializes all the data into dictionaries
added function to plot data in crypto graph that uses the classes in plotClass
added function to plotlines in plot class, is capable of doing it by the percent change or the correlation each crypto has or by price
added ability to plot volume over each of the five data types!

4/23/18
added a bar charting function to plotclass
added the ability to select what kinds of data you want for the initializedata and constructdataframes functions in cryptographs
fleshed out andrewsproj function so that it use the plotdata function in a few different ways
added a default param to each get data function in CryptoStats so that you can get new dicts of data even if you have already made one and it wont
interfere with the currently existing one

4/24/18
updated cryptoevaluator to use global data variables and not rely on the global variables for cryptostat
made sure all the logic gates with decrease or increase are treated as the positive or negative as intended in cryptoevaluator
replaced value with more descriptive name in iterations of priceSymbols in all files

4/25/18
fixed some line estimation calculations in cryptographs
added estimation of yvalues for a dataframe using the estimated lines calculated for the data
can now plot an estimated line fit on a piece of data or use another one that has already been calculated
serparated the plotting functions in cryptographs so that they only need parameters relevant to them

4/26/18
added functions to calculate the estimated probabilities for an exponentially distributed set of data
added functions to calculate the exponential cdf and pdf
added a function to calculate chisquare and the p-value
bar charts now show all the bar names
plotbar will now do histograms

4/27/18
added equality testing for means of samples
added in ttest for pairs
fixed label rearranging issue for the bar charts

5/12/18
new file PseudoAPI-Datastream retrieves the new data to be stored every minute for all the cryptos
added a function to prime each database with 2 hours of info
added a function to open a connection with a set of databases passed
added a function to close the connections you pass
implemented relative paths for all files

5/13/18
tables for each kind of data created in the pseudoapi database
functions to add rows of data to each table created
function to prime the database with 2 hours of each data type added
removed CTRBTC from all files now that it is delisted

5/17/18
ability to print all rows out of a table
added a function to print a row by the minute it is associated with (its id)
added a function that lets you select by the crypto (and the row as well)

5/18/18
all five data fields will update with minute information every minute in the pseudo api datastream
made a new file that just houses any general use versions of certain variables so that if they do not need to be changed they can be used instead
of copy and paste into each file
made a buy and sell pseudo api that just uses autotrader's version (use the binstepsize from here to populate your local stepsize
dictionary)

5/24/18
updated datastream api to commit any changes
updated datastream to delete the tables before the file is closed
added parameters documentation to every function in all files so as we go through them we fill out what each parameter and return value means

6/3/18
made supertrainer file

-SuperTrainer
added functions to read param files with a specific id number, day of the week, and website associated with them


-Generics
added modes dictionary
added websites dictionary
added superparameter dictionary
added superparameter definitions
added superparameter do not change list

6/9/18
SuperTrainer
-added setUpCryptoTrainerBots to return an array of subprocesses that will run the separate CryptoTrainer bots
-run parameters indicate if it is run standalone
-grabs all the trainer files up to the full amount in the directory (or whatever we specify) after that if more trainers are needed it randomly grabs one and randomizes it and gives it to the CryptoTrainer

CryptoEvalutor
-removed confusing "noinput" variable, now it checks if the system has passed any arguments
-reads any arguments passed to it by the function running it
-run parameters indicate if it is run standalone

CryptoTrainer
-run parameters indicate if it is run standalone
-added a readparamspassed function so that now there is a dictionary of passed parameters to the supertrainer
in the event that it is run alone or by the supertrainer

6/10/18
SuperTrainer
-added randomize params method
-intializes a directory for the training parameter files and the training parameter files

CryptoTrainer
-added an initdirectory that creates a storage set of files and a training set if either does not exist
-reformatted pickleinput to only pickle the parameter file needed
-reads in parameters passsed


6/13/18
All Files
-all relative files paths are now absolute

CryptoTrainer
-added check the ignoreparams list to the randomizer
-made the types of randomizing dependent by class
-the two types of randomization are based on variables detailing their range in their parameters
-writing and reading a pickle file requires the path to the file and the name of the pickle file
-a base param file is overwritten after each class and is used during each class to generate vairiations
-the correct set of parameters are passed to the Evaluators

SuperTrainer
-randomization can now be specified to affect whole groups of parameters in the same way

Generics
-specialSuperParams is a list of groups of parameters used by the super trainer to randomize the behavior or each Trainer
but these groups are all changed in specific ways as specified in the randomizeParameters function
-specialRange is a list of range values to help set the special param groups
-nonnegorzero tells the program what groups must be positive and non zero
-storedInput has been moved from the CryptoEvalutor file and serves as the passed parameters for each Evaluator

CryptoEvalutor
-reads in input correctly from the argv and stdin if run from a bot

6/15/18

Generics
-added calcPercentChange

CryptoTrainer
-now can run multiple evaluators when run by supertrainer

CryptoEvaluator
-now can be run by a trainer that was run by a super trainer

CryptoStatAnalysis
-uses the real logging system


6/19/18
updated all files that use priceSymbols to automatically update it

updated both BackTestDataCollector and CryptoStats to use passed priceSymbols dictionaries that are either the default one or one that is passed to them (YOU SHOULD PASS TO IT AN UPDATED ONE). cuts down on overall API calls needed to constantly update priceSymbols

PriceSymbolsUpdater
-made the file so priceSymbols can be set to the accurate most recent list based on the website used

CryptoEvaluator
-added function to ensure all the data dictionaries have the right currencies as key values

OldCode
-old code that I did not want to delete

Generics
-added a getLowerCaseDict where both the keys and values can be set to lower and a new dictionary is return

PseudoAPIDataStream
-all rows are  build using full symbol list
-all tables are build using full symbol list

6/23/18

CryptoStats
-now uses an absolute end time where all other endtimes are built off of that

6/24/18
CryptoTrainer
-values related to the success/failure of the bots of a training class are recorded and stored in the
passed parameter file for use by the SuperTrainer

SuperTrainer
-each trainer parameter file (called superParams) has an associated directory of evaluator parameters (called baseParams)
-there is a minimum number of evaluator parameters in each associated directory and new ones will be created if needed
-a random evaluator parameter file is chosen and told to the trainer so that it accesses and modifies only one
of the stored evaluator files

6/25/18
CryptoTrainer
-values recorded are scaled by the number of trades allowed and the number of minutes to be tested over

SuperTrainer
-pull the stored and trained parameter files of each bot for both trainer and evaluator
-calls method to compare the parameters and return the best one

7/3/18
Generics
-added a percenttodecimal value
-added lossallowed into the parameters passed for the crypto evaluator
-added a set of parameters designated as the parameters to check for which trainers are better
-added a replacement value that determines how many of the trainer parameters have to be better
to replace the original set of parameters

CryptoEvaluator
-incorporated the lossallowed

CryptoStatAnalyis
-added a loss allowed calculation to the money calculation

SuperTrainer
-now trainers are distinguished based on how many of the special parameters to be checked are better in the new set of trainer
parameters than the old ones
- randomize parameters now either adds or sets the new parameter value as the randVal generated

7/4/18
SuperTrainer
-reads in stdin values in order of the default parameter dictionaries from Generics
-now stores the recently trained trainer and evaluator id numbers

CryptoTrainer
-reads in stdin values in order of the default parameter dictionaries from Generics

Generics
-added a lossallowed to the parameters passed to both the super trainer and the crypto trainer
-added explanations to each of the passed parameters in Generics
-added parameters that can be combined
-added in a list for combined parameters and their corresponding modifiers
-added in

Readme:
updated to include an explanation of how the training process works

7/5/18

CryptoTrainer
-added in functionality to randomize the list of the generated combined parameters as well as the
modifiers that go with each new parameter (the set of old parameters to be combined)

7/6/18
CryptoEvaluator
-fixed so that it uses the params and paramspassed instead of PARAMETERS and storedInput
-filled out parameter descriptions and return statements for several functions
-removed many global variables and restricted them to being passed to
-made new dictionary to store the calculated values for all data required for calculating a score
-made new dictionaries for storing all the values for all data required to calculate a score and to get the
max of those datasets
-made new dictionary to store all the calculated values for the combined parameters
-made new dictionaries for storing all the values for all data for the combined parameters types and to get the
max of those datasets

7/7/18
CryptoEvaluator
-filled out method to find the maximum of all the stored values computed for the combined parameters
-filled out method to compute the values for all the combined parameters

7/8/18
-CryptoEvaluator, CryptoTrainer, and SuperTrainer have a prefix and pass a prefix that determines where they look for files

Generics
-added the parameters to flesh out the old parameters and add new functionaltity
-added the types of data for the score to be calculated to a list
-added the list of data to be persistently stored that is used for calcualtions

7/9/18

CryptoEvaluator
- updated updateCrypto to use the dataforscore dictionary and calculate values for all the new types of data for the score
-made supporting methods for updateCrypto for the data values that need more than a few lines to calculate

Generics
-added in read and write pickle functions

7/10/18

CryptoEvaluator
-removed the repeated score calculations
-added in reading the most recently stored crypto symbols
-stores a parameter dictionary in the solo evaluator directory if none currently is stored (assuming the evaluator is being run alone)

Generics
-removed the repeated score calculations
-introduced a variable restricting special parameters to not be negative (but can be zero)

CryptoTrainer
-added in writing the symbols dictionary if run alone
-added in reading the stored crypto symbols

SuperTrainer
-added in writing the symbols dictionary if run alone
-added in reading the stored crypto symbols

PseudoAPI_Datastream
-added in a method call for when the database is remade we store the symbols used as the new crypto symbols (both dict and list versions)

7/11/18

CryptoEvaluator
-in a working state

CryptoTrainer
-in a working state

7/12/18
SuperTrainer
-in a working state

CryptoTrainer
-fixed combining parameters so new ones are added but there are limits on the number of combined parameters as well
as the number of parameters that can be combined per combiend parameter

CryptoTradingEnvironment
-created
-is a class to encapsulate the required subprocesses to gather data, train evaluator bots, and run evaluator bots to trade

CryptoTradingManager
-created

CryptoDistribution
-added a function to read in parameters passed to it

7/14/18

CryptoTradingEnvironement
-added functionality to run SuperTrainers
-added functionality to run CrypotEvaluators that trade (hot/cold)

